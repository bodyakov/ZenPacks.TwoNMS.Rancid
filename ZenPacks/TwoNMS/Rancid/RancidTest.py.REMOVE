from Globals import *
from Products.ZenUtils.CyclingDaemon import CyclingDaemon

import logging
log = logging.getLogger('zen.rancidtest')
from twisted.internet import reactor

from datetime import datetime
from time import localtime, strftime

class RancidTest(CyclingDaemon):
    
    startDelay = 0 # in seconds
    
    def __init__(self):
        CyclingDaemon.__init__(self)
        log.info("call init")
        self.name = "zenrancidtest"
        log.debug("options: %s", self.options)
        
        # we only want to start the daemon once a day
        if self.options.daemon:
            self._calcStartDelay()
            self.options.cycletime = 60 * 60 * 4
        
    ## override run() to introduce the delay timer
    def run(self):
        reactor.callLater(self.startDelay, self.runCycle)
        reactor.run()
    
    def main_loop(self):
        #print "MAIN LOOP STARTED"
        log.info("main_loop started in RancidTest")
        
    def buildOptions(self):
        CyclingDaemon.buildOptions(self)
        self.parser.add_option( '--rancid-run', dest='rancid_run', action='store_true', default=False, help='Start the rancid process')

    def _calcStartDelay(self):
        currTime = strftime("%H:%M", localtime())
        startTime = '01:45'
        FMT = '%H:%M'
        delta = datetime.strptime(startTime, FMT) - datetime.strptime(currTime, FMT)
        self.startDelay = delta.seconds
        log.info("start delay = %s", self.startDelay)

if __name__ == '__main__':
    #import logging
    #logging.getLogger('zen.rancidtest').setLevel(80)
    rancidTest = RancidTest()
    rancidTest.run()
